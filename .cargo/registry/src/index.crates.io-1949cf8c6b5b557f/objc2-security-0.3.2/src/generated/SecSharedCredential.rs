//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

extern "C" {
    /// Predefined key constants used to get values in a dictionary
    /// of credentials returned by SecRequestWebCredential.
    ///
    /// shared password. You use this key to get a value of type CFStringRef
    /// that contains a password.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/security/ksecsharedpassword?language=objc)
    pub static kSecSharedPassword: &'static CFString;
}

extern "C-unwind" {
    /// Asynchronously store (or update) a shared password for a website.
    ///
    /// Parameter `fqdn`: The fully qualified domain name of the website requiring the password.
    ///
    /// Parameter `account`: The account name associated with this password.
    ///
    /// Parameter `password`: The password to be stored. Pass NULL to remove a shared password if it exists.
    ///
    /// Parameter `completionHandler`: A block which will be invoked when the function has completed. If the shared password was successfully added (or removed), the CFErrorRef parameter passed to the block will be NULL. If the error parameter is non-NULL, an error occurred and the error reference will hold the result. Note: the error reference will be automatically released after this handler is called, though you may optionally retain it for as long as needed.
    ///
    /// This function adds a shared password item which will be accessible by Safari and applications that have the specified fully-qualified domain name in their 'com.apple.developer.associated-domains' entitlement. If a shared password item already exists for the specified website and account, it will be updated with the provided password. To remove a password, pass NULL for the password parameter.
    ///
    /// Note: since a request involving shared web credentials may potentially require user interaction or other verification to be approved, this function is dispatched asynchronously; your code provides a completion handler that will be called once the results (if any) are available.
    #[cfg(feature = "block2")]
    pub fn SecAddSharedWebCredential(
        fqdn: &CFString,
        account: &CFString,
        password: Option<&CFString>,
        completion_handler: &block2::DynBlock<dyn Fn(*mut CFError)>,
    );
}

extern "C-unwind" {
    /// Asynchronously obtain one or more shared passwords for a website.
    ///
    /// Parameter `fqdn`: (Optional) Fully qualified domain name of the website for which passwords are being requested. If NULL is passed in this argument, the domain name(s) listed in the calling application's 'com.apple.developer.associated-domains' entitlement are searched implicitly.
    ///
    /// Parameter `account`: (Optional) Account name for which passwords are being requested. The account may be NULL to request all shared credentials which are available for the site, allowing the caller to discover an existing account.
    ///
    /// Parameter `completionHandler`: A block which will be called to deliver the requested credentials. If no matching items were found, the credentials array will be empty, and the CFErrorRef parameter will provide the error result. Note: the credentials and error references will be automatically released after this handler is called, though you may optionally retain either for as long as needed.
    ///
    /// This function requests one or more shared passwords for a given website, depending on whether the optional account parameter is supplied. To obtain results, the website specified in the fqdn parameter must be one which matches an entry in the calling application's 'com.apple.developer.associated-domains' entitlement.
    ///
    /// If matching shared password items are found, the credentials provided to the completionHandler will be a CFArrayRef containing CFDictionaryRef entries. Each dictionary entry will contain the following pairs (see Security/SecItem.h):
    /// key: kSecAttrServer     value: CFStringRef (the website)
    /// key: kSecAttrAccount    value: CFStringRef (the account)
    /// key: kSecSharedPassword value: CFStringRef (the password)
    ///
    /// If the found item specifies a non-standard port number (i.e. other than 443 for https), the following key may also be present:
    /// key: kSecAttrPort       value: CFNumberRef (the port number)
    ///
    /// Note: since a request involving shared web credentials may potentially require user interaction or other verification to be approved, this function is dispatched asynchronously; your code provides a completion handler that will be called once the results (if any) are available.
    #[cfg(feature = "block2")]
    #[deprecated = "Use ASAuthorizationController to make an ASAuthorizationPasswordRequest (AuthenticationServices framework)"]
    pub fn SecRequestSharedWebCredential(
        fqdn: Option<&CFString>,
        account: Option<&CFString>,
        completion_handler: &block2::DynBlock<dyn Fn(*const CFArray, *mut CFError)>,
    );
}

/// Returns a randomly generated password.
///
/// Returns: CFStringRef password in the form xxx-xxx-xxx-xxx where x is taken from the sets "abcdefghkmnopqrstuvwxy", "ABCDEFGHJKLMNPQRSTUVWXYZ", "3456789" with at least one character from each set being present.
#[inline]
pub unsafe extern "C-unwind" fn SecCreateSharedWebCredentialPassword(
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SecCreateSharedWebCredentialPassword() -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { SecCreateSharedWebCredentialPassword() };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}
